{"version":3,"sources":["components/MemeTemplate.jsx","App.js","index.js","images/meme-generator.png"],"names":["MemeDraw","props","data","url","name","clickEvent","onClick","src","alt","style","width","height","MemeModal","text0","text1","sharableMeme","cmData","createMemeEvent","changeHandler","shareMeme","id","className","title","value","onChange","type","length","Fragment","MemeTemplate","createMemePost","memeRequest","Request","method","fetch","then","res","json","response","success","currentMemeData","state","setState","isLoading","isError","memeData","memeOpenModal","event","preventDefault","this","stopPropagation","currentTarget","window","open","encodeURIComponent","console","log","blob","navigator","share","text","file","catch","error","target","memes","map","index","key","memeClicked","bind","closeModal","createMeme","React","PureComponent","App","logo","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3cccd2ed.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FaFacebookSquare, FaWhatsappSquare, FaTwitterSquare, FaInstagram } from 'react-icons/fa';\r\nconst MemeDraw = props => {\r\n    let { url, name } = props.data;\r\n    let { clickEvent } = props;\r\n    return (\r\n        <div onClick={clickEvent}>\r\n            <img src={url} alt={name} style={{ width: 200, height: 200 }} />\r\n            <div>{name}</div>\r\n        </div>\r\n    )\r\n}\r\nconst MemeModal = props => {\r\n    let { text0, text1, sharableMeme } = props.data;\r\n    let { name, url } = props.data.cmData;\r\n    let { clickEvent, createMemeEvent, changeHandler, shareMeme } = props;\r\n\r\n    return (\r\n        <div id=\"openModal\" className=\"modalDialog\">\r\n            <div>\r\n                <span onClick={clickEvent} title=\"Close\" className=\"close\">X</span>\r\n                <h2>{name}</h2>\r\n                <form className=\"createform\">\r\n                    <label>\r\n                        Text0:</label>\r\n                    <textarea value={text0} onChange={changeHandler} type=\"text\" name=\"text0\" id=\"text0\"></textarea>\r\n\r\n                    <br />\r\n                    <label>\r\n                        Text1: </label>\r\n                    <textarea value={text1} onChange={changeHandler} type=\"text\" name=\"text1\" id=\"text1\"></textarea>\r\n\r\n                    {sharableMeme.length <= 0 ?\r\n                        <div className=\"memeImg\"><img alt={name} src={url} style={{ width: 200, height: 200 }} /></div>\r\n                        :\r\n                        <div className=\"memeImg\"><input id=\"memeImg\" type=\"image\" alt={name} src={sharableMeme} style={{ width: 200, height: 200 }} /></div>}\r\n\r\n                    <div>\r\n                        <input type=\"button\" className=\"creatememe\" onClick={createMemeEvent} value=\"Create Meme\" />\r\n                    </div>\r\n\r\n                </form>\r\n                {sharableMeme.length > 0 ?\r\n                    <React.Fragment>\r\n                        <div>Share this meme to social media:</div>\r\n                        <button onClick={shareMeme} name=\"fb\" className=\"shareButton\"><FaFacebookSquare /></button>\r\n                        <button onClick={shareMeme} name=\"wa\" className=\"shareButton\"><FaWhatsappSquare /></button>\r\n                        <button onClick={shareMeme} name=\"tw\" className=\"shareButton\"><FaTwitterSquare /></button>\r\n                    </React.Fragment> : null}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass MemeTemplate extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            isError: false,\r\n            memeData: [],\r\n            memeOpenModal: false,\r\n            currentMemeData: {\r\n                text0: '',\r\n                text1: '',\r\n                cmData: {},\r\n                sharableMeme: ''\r\n            }\r\n        }\r\n    }\r\n    memeClicked(data, event) {\r\n        event.preventDefault();\r\n        let currentMemeData = { ...this.state.currentMemeData };\r\n        currentMemeData.cmData = data;\r\n        this.setState({\r\n            memeOpenModal: true,\r\n            currentMemeData: currentMemeData\r\n        })\r\n\r\n    }\r\n    createMeme(data, event) {\r\n        event.preventDefault();\r\n\r\n        this.createMemePost(data);\r\n    }\r\n    createMemePost = (data) => {\r\n        let url = \"https://api.imgflip.com/caption_image\";\r\n        let user = \"dixant\",\r\n            password = \"water!sg00d\";\r\n        let memeRequest = new Request(`${url}?template_id=${data.cmData.id}&username=${user}&password=${password}&text0=${data.text0}&text1=${data.text1}`, {\r\n            method: 'POST'\r\n        })\r\n        fetch(memeRequest)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                if (response.success === true) {\r\n                    let currentMemeData = { ...this.state.currentMemeData };\r\n                    currentMemeData.sharableMeme = response.data.url;\r\n                    this.setState({\r\n                        currentMemeData: currentMemeData\r\n                    })\r\n                }\r\n            })\r\n    }\r\n    shareMeme(event) {\r\n        event.stopPropagation();\r\n        switch (event.currentTarget.name) {\r\n            case \"fb\":\r\n                window.open(`https://www.facebook.com/sharer/sharer.php?u=${this.state.currentMemeData.sharableMeme}`, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=300,width=600');\r\n                break;\r\n            case \"wa\":\r\n                let url = encodeURIComponent(`${this.state.currentMemeData.sharableMeme}`);\r\n                console.log(url)\r\n                fetch(this.state.currentMemeData.sharableMeme)\r\n                    .then(function (response) {\r\n                        return response.blob()\r\n                    })\r\n                    .then(function (blob) {\r\n                        // here the image is a blob\r\n                        console.log(blob);\r\n                        if (navigator.share) {\r\n                            navigator.share({\r\n                                title: \"Meme\",\r\n                                text: this.state.currentMemeData.cmData.name,\r\n                                url: url,\r\n                                file: blob\r\n                            }).then(() => console.log('Successful share'))\r\n                                .catch(error => console.log('Error sharing:', error));\r\n                        }\r\n                        else {\r\n                            console.log(\"Web Share API is not supported in your browser.\")\r\n                        }\r\n                    });\r\n\r\n                /*window.open(`whatsapp://send?src=${encodeURIComponent(this.state.currentMemeData.sharableMeme)}`, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=300,width=600');*/\r\n                break;\r\n            case \"tw\":\r\n                window.open(`https://twitter.com/share?url=${this.state.currentMemeData.sharableMeme}`, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=300,width=600');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        //return false;\r\n    }\r\n    closeModal(event) {\r\n        let currentMemeData = { ...this.state.currentMemeData };\r\n        currentMemeData.text0 = '';\r\n        currentMemeData.text1 = '';\r\n        currentMemeData.cmData = {};\r\n        currentMemeData.sharableMeme = '';\r\n        this.setState({\r\n            memeOpenModal: false,\r\n            currentMemeData: currentMemeData\r\n        })\r\n    }\r\n    changeHandler(event) {\r\n        let currentMemeData = { ...this.state.currentMemeData };\r\n        currentMemeData[event.target.name] = event.target.value;\r\n        this.setState({\r\n            currentMemeData: currentMemeData\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        let memeRequest = new Request(`https://api.imgflip.com/get_memes`, {\r\n            method: 'GET'\r\n        });\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        fetch(memeRequest)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                if (response.success === true) {\r\n                    this.setState({\r\n                        memeData: response.data.memes,\r\n                        isLoading: false,\r\n                        isError: false\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    isError: true,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n    render() {\r\n        let { memeData, isLoading, isError, memeOpenModal, currentMemeData } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <div>start with a basic meme template:</div>\r\n                <div className=\"flex-container\">\r\n\r\n                    {memeData && memeData.length > 0 ? memeData.map((data, index) => (\r\n                        <MemeDraw key={data.id} data={data} clickEvent={this.memeClicked.bind(this, data)} />\r\n                    )) : null}\r\n                    {isLoading && <div>Loading...</div>}\r\n                    {isError && <div>something went wrong!! Please try again</div>}\r\n                </div>\r\n                {memeOpenModal && <MemeModal data={currentMemeData} shareMeme={this.shareMeme.bind(this)} changeHandler={this.changeHandler.bind(this)} clickEvent={this.closeModal.bind(this)} createMemeEvent={this.createMeme.bind(this, currentMemeData)} />}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default MemeTemplate;","import React from 'react';\r\nimport logo from './images/meme-generator.png';\r\nimport './styles/App.css';\r\n\r\nimport MemeTemplate from './components/MemeTemplate'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h1>Meme Generator</h1>\r\n      </header>\r\n      <MemeTemplate />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","module.exports = __webpack_public_path__ + \"static/media/meme-generator.2f0d6df3.png\";"],"sourceRoot":""}